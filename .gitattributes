
01-08-2020	6.98
02-08-2020	6.97
03-08-2020	6.99
04-08-2020	6.94
05-08-2020	6.93
06-08-2020	6.99
07-08-2020	7.16
08-08-2020	7.14
09-08-2020	7.02
10-08-2020	7.27
11-08-2020	7.30
12-08-2020	7.25
13-08-2020	7.29
14-08-2020	7.31
15-08-2020	7.27
16-08-2020	7.30
17-08-2020	7.34
18-08-2020	7.37
19-08-2020	7.37
20-08-2020	7.35
21-08-2020	7.30
22-08-2020	7.21
23-08-2020	7.25
24-08-2020	7.22
25-08-2020	7.34
26-08-2020	7.37
27-08-2020	7.35
28-08-2020	7.32
29-08-2020	7.28
30-08-2020	7.30
31-08-2020	7.31
01-09-2020	7.33
02-09-2020	7.34
03-09-2020	7.36
04-09-2020	7.40
05-09-2020	7.40
06-09-2020	7.41
07-09-2020	7.41
08-09-2020	7.43
09-09-2020	7.45
10-09-2020	7.47
11-09-2020	7.46
12-09-2020	7.46
13-09-2020	7.46
14-09-2020	7.44
15-09-2020	7.47
16-09-2020	7.47
17-09-2020	7.47
18-09-2020	7.52
19-09-2020	7.52
20-09-2020	7.52
21-09-2020	7.53
22-09-2020	7.57
23-09-2020	7.63
24-09-2020	7.66
25-09-2020	7.66
26-09-2020	7.60
27-09-2020	7.58
28-09-2020	7.55
29-09-2020	7.75
30-09-2020	7.81
01-10-2020	7.75
02-10-2020	7.69
03-10-2020	7.71
04-10-2020	7.70
05-10-2020	7.73
06-10-2020	7.73
07-10-2020	7.75
08-10-2020	7.83
09-10-2020	7.89
10-10-2020	7.89
11-10-2020	7.89
12-10-2020	7.91
13-10-2020	7.87
14-10-2020	7.88
15-10-2020	7.92
16-10-2020	7.91
17-10-2020	7.92
18-10-2020	7.93
19-10-2020	7.91
20-10-2020	7.88
21-10-2020	7.88
22-10-2020	7.82
23-10-2020	7.80
24-10-2020	7.80
25-10-2020	7.90
26-10-2020	7.94
27-10-2020	8.03
28-10-2020	8.12
29-10-2020	8.10
30-10-2020	8.12
31-10-2020	8.12
01-11-2020	8.12
02-11-2020	8.31
03-11-2020	8.38
04-11-2020	8.45
05-11-2020	8.46
06-11-2020	8.44
07-11-2020	8.44
08-11-2020	8.44
09-11-2020	8.47
10-11-2020	8.18
11-11-2020	8.24
12-11-2020	8.05
13-11-2020	7.79
14-11-2020	7.79
15-11-2020	7.79
16-11-2020	7.63
17-11-2020	7.68
18-11-2020	7.74
19-11-2020	7.72
20-11-2020	7.67
21-11-2020	7.67
22-11-2020	7.67
23-11-2020	7.58
24-11-2020	7.76

Squential

using System;
using System.Collections.Generic;
using System.IO;
namespace Squential
{

    class Program
    {

        struct USDTRY
        {
            public DateTime tarih;
            public Double kur;

        }
        static List<USDTRY> Grafik = new List<USDTRY>();
        public static void Olustur()
        {
            string dosya_yolu = @"C:\Users\elifv\Desktop\Yeni klasör\kur.txt";
            FileStream fs = new FileStream(dosya_yolu, FileMode.Open, FileAccess.Read);
            StreamReader sw = new StreamReader(fs);
            String yazi;
            for (; ; )
            {
                yazi = sw.ReadLine();
                if (yazi == "" || yazi == null) { break; }
                string[] subs = yazi.Split("\t");
                USDTRY uUSDTRY = new USDTRY();
                try
                {
                    uUSDTRY.kur = Convert.ToDouble(subs[1].Replace(".", ","));
                    uUSDTRY.tarih = Convert.ToDateTime(subs[0]);
                    Grafik.Add(uUSDTRY);
                }
                catch (Exception)
                {

                }
            }
            sw.Close();
            fs.Close();
        }

        public static void squential()
        {
            USDTRY[] uSDTRYs = Grafik.ToArray();
            USDTRY uSDTRY;
            USDTRY ek = new USDTRY();  //en küçük kuru bul 
            ek.kur = Grafik.ToArray()[0].kur;
            for (int i = 0; i < uSDTRYs.Length - 1; i++)
            {
                if (uSDTRYs[i].kur < ek.kur)
                {
                    ek = uSDTRYs[i];
                }
            }

            int enkucuk = Grafik.IndexOf(ek); //en kucuk kurun indexini al

            int minindex;
            for (int j = enkucuk; j < uSDTRYs.Length - 1; j++) //en kucuk kurun indexinden başlat
            {
                minindex = j;
                for (int i = j; i < uSDTRYs.Length; i++)
                {
                    if (uSDTRYs[i].kur < uSDTRYs[minindex].kur) //kuru küçükten büyüğe sırala selection sort
                    {
                        uSDTRY = uSDTRYs[i];
                        uSDTRYs[i] = uSDTRYs[minindex];
                        uSDTRYs[minindex] = uSDTRY;
                    }
                }
            }

            USDTRY eb = new USDTRY();  //en büyük kuru bul 
            eb.kur = Grafik.ToArray()[0].kur;
            for (int i = 0; i < uSDTRYs.Length; i++)
            {
                if (uSDTRYs[i].kur > ek.kur)
                {
                    eb = uSDTRYs[i];
                }
            }
            double kar = eb.kur - ek.kur;
            kar = Math.Round(kar, 2);

            Console.WriteLine("Alım :");
            Console.WriteLine("Kur : " + ek.kur + "\tTarih : " + ek.tarih.ToShortDateString());
            Console.WriteLine();
            Console.WriteLine("Satım:");
            Console.WriteLine("Kur : " + eb.kur + "\tTarih : " + eb.tarih.ToShortDateString());
            Console.WriteLine();
            Console.WriteLine("Kar : " + kar);
        }
        static void Main(string[] args)
        {
            Olustur();
            squential();
        }
    }
}

mergesort

using System;
using System.Collections.Generic;
using System.IO;

namespace mergesort
{
    class Program
    {
        struct USDTRY
        {
            public DateTime tarih;
            public Double kur;

        }
        static List<USDTRY> Grafik = new List<USDTRY>();
      
        public static void Olustur()
        {
            string dosya_yolu = @"C:\Users\elifv\Desktop\Yeni klasör\kur.txt";
            FileStream fs = new FileStream(dosya_yolu, FileMode.Open, FileAccess.Read);
            StreamReader sw = new StreamReader(fs);
            String yazi;
            for (; ; )
            {
                yazi = sw.ReadLine();
                if (yazi == "" || yazi == null) { break; }
                string[] subs = yazi.Split("\t");
                USDTRY uUSDTRY = new USDTRY();
                try
                {
                    uUSDTRY.kur = Convert.ToDouble(subs[1].Replace(".", ","));
                    uUSDTRY.tarih = Convert.ToDateTime(subs[0]);
                    Grafik.Add(uUSDTRY);
                }
                catch (Exception)
                {

                }
            }
            sw.Close();
            fs.Close();
        }

        public static void Mergesort()
        {
            USDTRY[] uSDTRYs = Grafik.ToArray();

            USDTRY ek = new USDTRY(); 
            ek= Grafik.ToArray()[0];
            for (int i = 0; i < uSDTRYs.Length - 1; i++)
            {
                if (uSDTRYs[i].kur < ek.kur)
                {
                    ek = uSDTRYs[i];
                }
            }

            int enkucuk = Grafik.IndexOf(ek); 
            int lenght = uSDTRYs.Length;

            MergeSort(uSDTRYs, enkucuk, lenght - 1);

            static void MergeSort(USDTRY[] A, int bas, int son)
            {
                if (bas < son)
                {
                    int orta = (bas + son) / 2;
                    MergeSort(A, bas, orta);
                    MergeSort(A, orta + 1, son);
                    Merge(A, bas, orta, son);
                }
            }
            static void Merge(USDTRY[] A, int bas, int orta, int son)
            {

                int sol = bas;
                int sag = orta + 1;
                USDTRY[] tmp = new USDTRY[(son - bas) + 1];
                int tmpIndex = 0;

                while ((sol <= orta) && (sag <= son))
                {
                    if (A[sol].kur < A[sag].kur)
                    {
                        tmp[tmpIndex] = A[sol];
                        sol = sol + 1;
                    }
                    else
                    {
                        tmp[tmpIndex] = A[sag];
                        sag = sag + 1;
                    }
                    tmpIndex = tmpIndex + 1;
                }

                if (sol <= orta)
                {
                    while (sol <= orta)
                    {
                        tmp[tmpIndex] = A[sol];
                        sol = sol + 1;
                        tmpIndex = tmpIndex + 1;
                    }
                }

                if (sag <= son)
                {
                    while (sag <= son)
                    {
                        tmp[tmpIndex] = A[sag];
                        sag = sag + 1;
                        tmpIndex = tmpIndex + 1;
                    }
                }

                for (int i = 0; i < tmp.Length; i++)
                {
                    A[bas + i] = tmp[i];
                }

            }

            USDTRY eb = new USDTRY();  //en büyük kuru bul 
            eb.kur = Grafik.ToArray()[0].kur;
            for (int i = 0; i < uSDTRYs.Length; i++)
            {
                if (uSDTRYs[i].kur > ek.kur)
                {
                    eb = uSDTRYs[i];
                }
            }
            double kar = eb.kur - ek.kur;
            kar = Math.Round(kar, 2);

            Console.WriteLine("Alım :");
            Console.WriteLine("Kur : " + ek.kur + "\tTarih : " + ek.tarih.ToShortDateString());
            Console.WriteLine();
            Console.WriteLine("Satım:");
            Console.WriteLine("Kur : " + eb.kur + "\tTarih : " + eb.tarih.ToShortDateString());
            Console.WriteLine();
            Console.WriteLine("Kar : " + kar);
        }
        static void Main(string[] args)
        {
            Olustur();
            Mergesort();
        }
    }
}

quicksort

using System;
using System.Collections.Generic;
using System.IO;

namespace Quicksort
{
    class Program
    {
       
        struct USDTRY
        {
            public DateTime tarih;
            public Double kur;

        }
        static List<USDTRY> Grafik = new List<USDTRY>();

        public static void Olustur()
        {
            string dosya_yolu = @"C:\Users\elifv\Desktop\Yeni klasör\kur.txt";
            FileStream fs = new FileStream(dosya_yolu, FileMode.Open, FileAccess.Read);
            StreamReader sw = new StreamReader(fs);
            String yazi;
            for (; ; )
            {
                yazi = sw.ReadLine();
                if (yazi == "" || yazi == null) { break; }
                string[] subs = yazi.Split("\t");
                USDTRY uUSDTRY = new USDTRY();
                try
                {
                    uUSDTRY.kur = Convert.ToDouble(subs[1].Replace(".", ","));
                    uUSDTRY.tarih = Convert.ToDateTime(subs[0]);
                    Grafik.Add(uUSDTRY);
                }
                catch (Exception)
                {

                }
            }
            sw.Close();
            fs.Close();
        }

        static void quick_sort(USDTRY[] dizi, int bas, int son)
        {
            int i;
            if (bas < son)
            {
                i = partition(dizi, bas, son);
                quick_sort(dizi, bas, i - 1);
                quick_sort(dizi, i + 1, son);
            }
        }
        static int partition(USDTRY[] A, int bas, int son)
        {
            double gecici;

            int i = bas - 1;
            for (int j = bas; j <= son - 1; j++)
            {
                if (A[j].kur < A[son].kur)  
                {
                    i++;
                    gecici = A[i].kur;
                    A[i] = A[j];
                    A[j].kur = gecici;
                }
            }
            gecici = A[i + 1].kur;
            A[i + 1] = A[son];
            A[son].kur = gecici;
            return i + 1;
        }


        public static void quickSort()
        {

            USDTRY[] uSDTRYs = Grafik.ToArray();

            USDTRY ek = new USDTRY();
            ek = Grafik.ToArray()[0];
            for (int i = 0; i < uSDTRYs.Length - 1; i++)
            {
                if (uSDTRYs[i].kur < ek.kur)
                {
                    ek = uSDTRYs[i];
                }
            }

            int enkucuk = Grafik.IndexOf(ek);
            int lenght = uSDTRYs.Length - 1;

            quick_sort(uSDTRYs, enkucuk, lenght);


            USDTRY eb = new USDTRY();  //en büyük kuru bul 
            eb.kur = Grafik.ToArray()[0].kur;
            for (int i = 0; i < uSDTRYs.Length; i++)
            {
                if (uSDTRYs[i].kur > ek.kur)
                {
                    eb = uSDTRYs[i];
                }
            }

            double kar = eb.kur - ek.kur;
            kar = Math.Round(kar, 2);

            Console.WriteLine("Alım :");
            Console.WriteLine("Kur : " + ek.kur + "\tTarih : " + ek.tarih.ToShortDateString());
            Console.WriteLine();
            Console.WriteLine("Satım:");
            Console.WriteLine("Kur : " + eb.kur + "\tTarih : " + eb.tarih.ToShortDateString());
            Console.WriteLine();
            Console.WriteLine("Kar : " + kar);
        }
        static void Main(string[] args)
        {
            Olustur();
            quickSort();
        }
    }
}

